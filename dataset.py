import cv2
import numpy as np
from ripple import RippleGenerator

import torch
from torch.utils.data import Dataset, DataLoader

class RippleVideoDataset(Dataset):
    '''
        `RippleVideoDataset(img_dir, img_name, frame_cnt, img_shape)`:
        Stores the ripple video frames generated by the taichi wave generator script over a single image
        @param:
        `img_dir`: the directory where stores the basic image
        `img_name`: name of the basic image
        `frame_cnt`: number of frames generated of the ripple video
        `img_shape:` fixed size (h, w) of the video. (should be consistent with `shape` in ripple.py)
    '''
    def __init__(self, img_dir='./images/', img_name='0.png', frame_cnt=100, img_shape=(256, 256)):
        self.img_dir = img_dir
        self.img_name = img_name
        self.frame_cnt = frame_cnt
        self.img_shape = img_shape
        self.frames = [] # frames list
        self.heights = [] # wave height maps list

        self.img_path = self.img_dir + self.img_name
        self.img = cv2.imread(self.img_path)
        self.img = cv2.resize(self.img, self.img_shape[::-1])

        self.frames, self.heights = RippleGenerator(self.img_name, self.img, self.frame_cnt)

    def __len__(self):
        assert self.frame_cnt == len(self.frames) and self.frame_cnt == len(self.heights), 'frames/height maps num error'
        return self.frame_cnt

    def __getitem__(self, index):
        # convert the input data and label to np.array of dtype np.float32
        frame = np.array(self.frames[index], dtype=np.float32)
        height = np.array(self.heights[index], dtype=np.float32)
        # return shape: (*self.img_shape, 3), self.img_shape
        return frame, height


def get_dataloader(dataset, args):

    batch_size = args.batch_size
    num_workers = args.num_workers
    pin_memory = args.pin_memory

    train_dataloader = DataLoader(dataset, batch_size, shuffle=True, num_workers=num_workers, pin_memory=pin_memory)
    return train_dataloader

def main():
    # test RippleVideoDataset
    ds = RippleVideoDataset(img_name='6.png')
    print('test dataset length', len(ds))
    frame, height = ds[99]
    print('return shape:', frame.shape, height.shape)
    cv2.imshow('frame', frame.astype(np.uint8))
    cv2.waitKey(1000)
    cv2.imshow('height', height)
    cv2.waitKey(1000)
    cv2.destroyAllWindows()

if __name__ == '__main__':
    main()